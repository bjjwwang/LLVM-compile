name: Build LLVM from Source

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build LLVM on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-24.04]
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build unzip curl wget python3 git
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Set Environment Variables
        run: |
          echo "MajorLLVMVer=16" >> $GITHUB_ENV
          echo "LLVMVer=16.0.4" >> $GITHUB_ENV
          echo "LLVMHome=llvm-${MajorLLVMVer}.0.0.obj" >> $GITHUB_ENV
          echo "SourceLLVM=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-${LLVMVer}.zip" >> $GITHUB_ENV
          echo "SVFHOME=$PWD" >> $GITHUB_ENV
          echo "jobs=$(nproc)" >> $GITHUB_ENV

      - name: Download and Build LLVM
        run: |
          set -e  # 遇到错误立即退出

          LLVMHome="llvm-${MajorLLVMVer}.0.0.obj"
          SourceLLVM="https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-${LLVMVer}.zip"

          function download_and_extract {
              local url="$1"
              local output="$2"
              local folder="$3"

              if [[ -f "$output" ]]; then
                  echo "File $output exists, skipping download..."
              else
                  echo "Downloading $url..."
                  curl -L "$url" -o "$output" || wget -c "$url" -O "$output"
              fi

              if [[ -d "$folder" ]]; then
                  echo "Folder $folder exists, skipping extraction..."
              else
                  echo "Extracting $output..."
                  mkdir -p "$folder"
                  unzip "$output" -d "$folder"
              fi
          }

          echo "Downloading and extracting LLVM source..."
          download_and_extract "$SourceLLVM" "llvm.zip" "llvm-source"

          # 统一 LLVM 目录格式，确保路径正确
          LLVM_SRC_DIR=$(find llvm-source -maxdepth 1 -type d -name "llvm-project-*")
          if [[ -z "$LLVM_SRC_DIR" ]]; then
              echo "Error: LLVM source directory not found!"
              ls -R llvm-source
              exit 1
          fi

          # **重命名目录**，去掉 `llvmorg-`，保证 CMake 识别
          EXPECTED_DIR="llvm-source/llvm-project-${LLVMVer}"
          mv "$LLVM_SRC_DIR" "$EXPECTED_DIR"

          # 确保 CMake 能找到 llvm 目录
          if [[ ! -d "$EXPECTED_DIR/llvm" ]]; then
              echo "Error: LLVM source directory '$EXPECTED_DIR/llvm' not found!"
              ls -R "$EXPECTED_DIR"
              exit 1
          fi

          echo "LLVM source directory: $EXPECTED_DIR"

          echo "Building LLVM..."
          mkdir -p llvm-build
          cd llvm-build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX="$SVFHOME/$LLVMHome" \
                -DLLVM_ENABLE_PROJECTS="clang" \
                -DLLVM_ENABLE_RTTI=ON \
                -DBUILD_SHARED_LIBS=ON \
                -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
                "$PWD/$EXPECTED_DIR/llvm"  # **这里确保路径正确**
          cmake --build . --parallel ${jobs}
          cmake --install .

          cd ..
          rm -rf llvm.zip llvm-source llvm-build

      - name: Package LLVM
        run: |
          OS_VERSION=$(lsb_release -rs)
          ARCH=${{ matrix.arch }}
          ZIP_NAME="llvm-16-ubuntu${OS_VERSION}-${ARCH}.zip"
          mv llvm-16.0.0.obj llvm-16
          zip -r $ZIP_NAME llvm-16
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload LLVM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 7
