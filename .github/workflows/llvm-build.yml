name: Build LLVM from Source

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build LLVM on ${{ matrix.os }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-24.04]
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build unzip curl wget python3 git
          if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
            sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          fi

      - name: Set Environment Variables
        run: |
          echo "MajorLLVMVer=16" >> $GITHUB_ENV
          echo "LLVMHome=llvm-${MajorLLVMVer}.0.0.obj" >> $GITHUB_ENV
          echo "SourceLLVM=https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-16.0.0.zip" >> $GITHUB_ENV
          echo "SVFHOME=$PWD" >> $GITHUB_ENV
          echo "jobs=$(nproc)" >> $GITHUB_ENV

      - name: Download and Build LLVM
        run: |
          set -e
          LLVMHome="llvm-${MajorLLVMVer}.0.0.obj"
          SourceLLVM="https://github.com/llvm/llvm-project/archive/refs/tags/llvmorg-16.0.0.zip"

          function generic_download_file {
              if [[ $# -ne 2 ]]; then
                  echo "$0: bad args to generic_download_file!"
                  exit 1
              fi

              if [[ -f "$2" ]]; then
                  echo "File $2 exists, skip download..."
                  return
              fi

              local download_failed=false
              if type curl &> /dev/null; then
                  if ! curl -L "$1" -o "$2"; then
                      download_failed=true
                  fi
              elif type wget &> /dev/null; then
                  if ! wget -c "$1" -O "$2"; then
                      download_failed=true
                  fi
              else
                  echo "Cannot find download tool. Please install curl or wget."
                  exit 1
              fi

              if $download_failed; then
                  echo "Failed to download $1"
                  rm -f "$2"
                  exit 1
              fi
          }

          function build_llvm_from_source {
              mkdir "$LLVMHome"
              echo "Downloading LLVM source..."
              generic_download_file "$SourceLLVM" llvm.zip
              echo "Unzipping LLVM source..."
              mkdir llvm-source
              unzip llvm.zip -d llvm-source

              echo "Building LLVM..."
              mkdir llvm-build
              cd llvm-build
              cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
                    -DCMAKE_INSTALL_PREFIX="$SVFHOME/$LLVMHome" \
                    -DLLVM_ENABLE_PROJECTS="clang" \
                    -DLLVM_ENABLE_RTTI=ON \
                    -DBUILD_SHARED_LIBS=ON \
                    -DLLVM_TARGETS_TO_BUILD="X86;AArch64" \
                    ../llvm-source/llvm-project-16.0.0/llvm
              cmake --build . --parallel ${jobs}
              cmake --install .

              cd ..
              rm -r llvm-source llvm-build llvm.zip
          }

          build_llvm_from_source

      - name: Package LLVM
        run: |
          OS_VERSION=$(lsb_release -rs)
          ARCH=${{ matrix.arch }}
          ZIP_NAME="llvm-16-ubuntu${OS_VERSION}-${ARCH}.zip"
          mv llvm-16.0.0.obj llvm-16
          zip -r $ZIP_NAME llvm-16
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload LLVM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: llvm-${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 3
